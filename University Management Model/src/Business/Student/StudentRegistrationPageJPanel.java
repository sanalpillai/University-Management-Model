/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Business.Student;

import Business.Admin.TicketManager;
import Business.Professor.Course;
import Business.Professor.CourseHistory;
import Business.Professor.ProfessorLogin;
import Business.Professor.ProfessorLoginHistory;
import Business.Professor.ViewCourseCatalogJPanel;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author zakir
 */
public class StudentRegistrationPageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationPageJPanel
     */
    
    private HashMap<String, String> courseDescriptions;
    private HashMap<String, List<String>> courseProfessors;
    EnrollmentHistory enrollmentList;
    CourseHistory c_history;
    
    javax.swing.JPanel workArea;
    StudentLoginHistory history;
    private studentLogin loggedInUser;
    private ProfessorLogin profLogin;
    ProfessorLoginHistory history1;
    private Enrollment enroll;
    TicketManager ticketManager;
    
    
    public StudentRegistrationPageJPanel(JPanel workArea,StudentLoginHistory history,studentLogin loggedInUser,EnrollmentHistory enrollmentList,CourseHistory c_history,ProfessorLogin profLogin,ProfessorLoginHistory history1,Enrollment enroll,TicketManager ticketManager ) {
        initComponents();
        this.history = history;
        this.loggedInUser = loggedInUser;
        this.workArea = workArea;
        this.enrollmentList = enrollmentList;
        this.c_history = c_history;
        this.profLogin = profLogin;
        this.history1 = history1;
        this.enroll = enroll;
        this.ticketManager = ticketManager;
        
        populateTable();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnEnroll = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblCourseID = new javax.swing.JLabel();
        lblCourseName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        txtCourseName = new javax.swing.JTextField();
        txtCourseDescription = new javax.swing.JTextField();
        lblTerm = new javax.swing.JLabel();
        txtTerm = new javax.swing.JTextField();
        btnViewSection = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        lblProfessor = new javax.swing.JLabel();
        txtProfessorName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("ENROLL COURSE");

        btnEnroll.setText("Enroll");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblCourseID.setText("Course ID:");

        lblCourseName.setText("Course Name:");

        jLabel1.setText("Course Description:");

        lblTerm.setText("Term:");

        btnViewSection.setText("View Section");
        btnViewSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSectionActionPerformed(evt);
            }
        });

        tblCourse.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Professor", "Course Description", "Term"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourse);

        lblProfessor.setText("Professor:");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/icons/online-course.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewSection))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(500, 500, 500))
            .addGroup(layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblProfessor)
                    .addComponent(lblCourseName)
                    .addComponent(lblCourseID)
                    .addComponent(jLabel1)
                    .addComponent(lblTerm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEnroll, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtCourseID)
                        .addComponent(txtCourseName)
                        .addComponent(txtCourseDescription)
                        .addComponent(txtTerm)
                        .addComponent(txtProfessorName, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, lblTerm});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnViewSection))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseID)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseName)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblProfessor)
                    .addComponent(txtProfessorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtCourseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTerm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEnroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jLabel2))
                .addGap(284, 284, 284))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ViewStudentPortalJPanel panel = new ViewStudentPortalJPanel(workArea,history,loggedInUser,enrollmentList,c_history,profLogin,history1,enroll,ticketManager);
        workArea.add("ViewStudentPortalJPanel", panel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private int creditsPerCourse = 4; // Each course is equal to 4 points
    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
    // TODO add your handling code here: 
    String CourseID = txtCourseID.getText();
    String CourseName =txtCourseName.getText();
    String Professor = txtProfessorName.getText();
    String Description = txtCourseDescription.getText();
    String Term = txtTerm.getText();
    
     EnrollmentManager enrollmentManager = EnrollmentManager.getInstance();
    
     // Check if the total enrolled credits will not exceed 8
        if (enrollmentManager.getTotalEnrolledCredits() + creditsPerCourse > 8) {
            JOptionPane.showMessageDialog(this, "You can only enroll up to 8 credits.");
            return; // Stop the enrollment process if exceeded 8 credits
        }

        // Rest of your enrollment logic
    Enrollment newCourse = enrollmentList.addNewCourse();
       
    newCourse.setCourse_ID(CourseID);
    newCourse.setCourse(CourseName);
    newCourse.setProfessor(Professor);
    newCourse.setDescription(Description);
    newCourse.setTerm(Term);
    
    enrollmentManager.addCredits(creditsPerCourse); // Update total enrolled credits
    JOptionPane.showMessageDialog(this,"Course Enrolled Successfully!");

    }//GEN-LAST:event_btnEnrollActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
          String searchUsername = txtSearch.getText().trim();
          populateTables(searchUsername);

    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnViewSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSectionActionPerformed
        // TODO add your handling code here:  
        
        int selectedRowIndex = tblCourse.getSelectedRow();
        
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)  tblCourse.getModel();
        Course selectedUser = (Course) model.getValueAt(selectedRowIndex, 0);
       ProfessorLogin professor = selectedUser.getProfessor();
            
       
       for (Course cos1 : c_history.getHistory()) {
           for (ProfessorLogin prof : history1.getHistory()) {
            String professorFirstName = prof.getFirstName();
           // for (ProfessorLogin prof : history1.getHistory()) {
            //String professorFirstName = prof.getFirstName();
            //String professorFirstName = professor.getFirstName();
            txtCourseID.setText(String.valueOf(selectedUser.getCourse_id()));
            txtCourseName.setText(String.valueOf(selectedUser.getCourse_name()));
            
            
            txtProfessorName.setText(professorFirstName); // Set professor's first name
            
            txtCourseDescription.setText(String.valueOf(selectedUser.getCourse_description()));
            txtTerm.setText(String.valueOf(selectedUser.getTerm()));
            //}
           }
            }
    }//GEN-LAST:event_btnViewSectionActionPerformed

private void customizeComponents() {
        // Set background color
        this.setBackground(new Color(44, 62, 80));

        // Set font and text color for labels
        Font labelFont = new Font("Tahoma", Font.BOLD, 12);
        Color textColor = new Color(236, 240, 241);

        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 28));
        lblTitle.setForeground(textColor);

        lblCourseID.setFont(labelFont);
        lblCourseID.setForeground(textColor);
        lblCourseName.setFont(labelFont);
        lblCourseName.setForeground(textColor);
        jLabel1.setFont(labelFont);
        jLabel1.setForeground(textColor);
        lblTerm.setFont(labelFont);
        lblTerm.setForeground(textColor);
        lblProfessor.setFont(labelFont);
        lblProfessor.setForeground(textColor);

        // Set text field styles
        Color textFieldBackground = new Color(52, 73, 94);
        Border textFieldBorder = BorderFactory.createEmptyBorder(5, 15, 5, 15);

        txtSearch.setBackground(textFieldBackground);
        txtSearch.setForeground(textColor);
        txtSearch.setBorder(textFieldBorder);
        txtCourseID.setBackground(textFieldBackground);
        txtCourseID.setForeground(textColor);
        txtCourseID.setBorder(textFieldBorder);
        txtCourseName.setBackground(textFieldBackground);
        txtCourseName.setForeground(textColor);
        txtCourseName.setBorder(textFieldBorder);
        txtCourseDescription.setBackground(textFieldBackground);
        txtCourseDescription.setForeground(textColor);
        txtCourseDescription.setBorder(textFieldBorder);
        txtTerm.setBackground(textFieldBackground);
        txtTerm.setForeground(textColor);
        txtTerm.setBorder(textFieldBorder);
        txtProfessorName.setBackground(textFieldBackground);
        txtProfessorName.setForeground(textColor);
        txtProfessorName.setBorder(textFieldBorder);

        // Set button style
        Color buttonBackground = new Color(52, 152, 219);
        Color buttonTextColor = new Color(255, 255, 255);
        Border buttonBorder = BorderFactory.createEmptyBorder(10, 25, 10, 25);

        btnEnroll.setBackground(buttonBackground);
        btnEnroll.setForeground(buttonTextColor);
        btnEnroll.setBorder(buttonBorder);
        btnBack.setBackground(buttonBackground);
        btnBack.setForeground(buttonTextColor);
        btnBack.setBorder(buttonBorder);
        btnSearch.setBackground(buttonBackground);
        btnSearch.setForeground(buttonTextColor);
        btnSearch.setBorder(buttonBorder);
        btnViewSection.setBackground(buttonBackground);
        btnViewSection.setForeground(buttonTextColor);
        btnViewSection.setBorder(buttonBorder);

        // Set table style
        tblCourse.setBackground(textFieldBackground);
        tblCourse.setForeground(textColor);
        tblCourse.setFont(new Font("Tahoma", Font.PLAIN, 12));
        jScrollPane1.getViewport().setBackground(new Color(44, 62, 80));

        // Set table header style
        tblCourse.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 12));
        tblCourse.getTableHeader().setBackground(new Color(52, 73, 94));
        tblCourse.getTableHeader().setForeground(new Color(44, 62, 80));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewSection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblProfessor;
    private javax.swing.JLabel lblTerm;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTextField txtCourseDescription;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtProfessorName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTerm;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblCourse.getModel();
        dtm.setRowCount(0);
        
        for(Course cos1: c_history.getHistory()){
            for (ProfessorLogin prof : history1.getHistory()) {
            Object[] row = new Object[5];
            row[0] = cos1;
            row[1] = cos1.getCourse_name();
            
            row[2] = prof.getFirstName();
            
            row[3] = cos1.getCourse_description();
            row[4] = cos1.getTerm();
            
            dtm.addRow(row);
            
            
            TableColumnModel columnModel = tblCourse.getColumnModel();
TableColumn column = columnModel.getColumn(2); // 2 is the index of the Professor column

// Set the tooltip text for specific values in the Professor column
column.setCellRenderer(new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        // Conditionally set tooltip text based on the cell content
        String professorName = value.toString();
        if ("John".equals(professorName)) {
            setToolTipText("Rating: 4.8/5"); // Tooltip for entry with professor name "John"
        } else if ("Harry".equals(professorName)) {
            setToolTipText("Rating: 5.0/5"); // Tooltip for entry with professor name "Alice"
        }else if ("Shawn".equals(professorName)) {
            setToolTipText("Rating: 5.0/5"); // Tooltip for entry with professor name "Alice"
        }
        else {
                // Default tooltip for other entries
        }
        
        return this;
    }
});


            
  } } }
    
    
    private void populateTables(String filterID) {
        DefaultTableModel model = (DefaultTableModel) tblCourse.getModel();
        model.setRowCount(0);

        for (Course cos1 : c_history.getHistory()) {
            for (ProfessorLogin prof : history1.getHistory()) {
            if (!filterID.isEmpty() && !prof.getFirstName().toLowerCase().contains(filterID.toLowerCase())) {
                continue;
            }
            Object[] row = new Object[5];
            row[0] = cos1;
            row[1] = cos1.getCourse_name();
            row[2] = prof.getFirstName();
            row[3] = cos1.getCourse_description();
            row[4] = cos1.getTerm();
            model.addRow(row);
        }
 }}
}